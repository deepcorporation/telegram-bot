import requests

def emotion_detector(text_to_analyze):
    url = 'https://sn-watson-emotion.labs.skills.network/v1/watson.runtime.nlp.v1/NlpService/EmotionPredict'
    headers = {"grpc-metadata-mm-model-id": "emotion_aggregated-workflow_lang_en_stock"}
    input_json = {"raw_document": {"text": text_to_analyze}}
    
    response = requests.post(url, json=input_json, headers=headers)
    
    if response.status_code == 200:
        data = response.json()
        emotion_predictions = data.get('emotionPredictions', [])
        if emotion_predictions:
            emotions = emotion_predictions[0]['emotion']
            dominant_emotion = max(emotions, key=emotions.get)
            
            output = {emotion: emotions.get(emotion, 0) for emotion in ['anger', 'disgust', 'fear', 'joy', 'sadness']}
            output['dominant_emotion'] = dominant_emotion
            
            return output
    else:
        return "Error en la solicitud"

# Test de la función con el texto proporcionado
if __name__ == "__main__":
    text_to_analyze = "Me encanta esta nueva tecnología."
    resultado = emotion_detector(text_to_analyze)
    print("Resultado:", resultado)




:::::::::::


import requests

def emotion_detector(text_to_analyze):
    url = 'https://sn-watson-emotion.labs.skills.network/v1/watson.runtime.nlp.v1/NlpService/EmotionPredict'
    headers = {"grpc-metadata-mm-model-id": "emotion_aggregated-workflow_lang_en_stock"}
    input_json = {"raw_document": {"text": text_to_analyze}}
    
    response = requests.post(url, json=input_json, headers=headers)
    
    if response.status_code == 200:
        data = response.json()
        emotion_predictions = data.get('emotionPredictions', [])
        if emotion_predictions:
            emotions = emotion_predictions[0]['emotion']
            dominant_emotion = max(emotions, key=emotions.get)
            
            output = {emotion: emotions.get(emotion, 0) for emotion in ['anger', 'disgust', 'fear', 'joy', 'sadness']}
            output['dominant_emotion'] = dominant_emotion
            
            return output
        
    return "Error en la solicitud"

if __name__ == "__main__":
    text_to_analyze = "I am so happy I am doing this."
    resultado = emotion_detector(text_to_analyze)
    print("Resultado:", resultado)



::::::::



from flask import Flask, request, jsonify
from EmotionDetection.emotion_detection import emotion_detector

app = Flask(__name__)

@app.route('/')
def index():
    return 'Welcome to the Emotion Detection System!'

@app.route('/emotionDetector', methods=['POST'])
def emotionDetector():
    try:
        text_to_analyze = request.form['text']
        if not text_to_analyze:
            return jsonify({'error': 'Text field is empty'}), 400
        
        result = emotion_detector(text_to_analyze)
        response = {
            "anger": result['anger'],
            "disgust": result['disgust'],
            "fear": result['fear'],
            "joy": result['joy'],
            "sadness": result['sadness'],
            "dominant_emotion": result['dominant_emotion']
        }
        return jsonify(response), 200
    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    app.run(debug=True)






